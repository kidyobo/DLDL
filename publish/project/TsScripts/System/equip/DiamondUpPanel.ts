import { Global as G } from 'System/global'
import { ProtocolUtil } from 'System/protocol/ProtocolUtil'
import { ThingItemData } from 'System/data/thing/ThingItemData'
import { Events } from 'System/Events'
import { EquipStrengthenData } from 'System/data/EquipStrengthenData'
import { ThingData } from 'System/data/thing/ThingData'
import { InsertDiamondItemData } from 'System/equip/InsertDiamondItemData'
import { Macros } from 'System/protocol/Macros'
import { NetModule } from 'System/net/NetModule'
import { TextTipData } from 'System/tip/tipData/TextTipData'
import { DiamondUpItemData } from 'System/equip/DiamondUpItemData'
import { DiamondUpMaterialItemData } from 'System/equip/DiamondUpMaterialItemData'
import { Color } from 'System/utils/ColorUtil'
import { TextFieldUtil } from 'System/utils/TextFieldUtil'
import { KeyWord } from 'System/constants/KeyWord'
import { EnumEquipRule } from 'System/data/thing/EnumEquipRule'
import { CommonForm, UILayer } from "System/uilib/CommonForm"
import { UIPathData } from "System/data/UIPathData"
import { FixedList } from "System/uilib/FixedList"
import { List, ListItem } from "System/uilib/List"
import { IconItem } from "System/uilib/IconItem"
import { TipFrom } from 'System/tip/view/TipsView'
import { ActivityRuleView } from 'System/diandeng/ActivityRuleView'
import { UIEffect, EffectType } from "System/uiEffect/UIEffect"
import { EquipUtils } from 'System/utils/EquipUtils'
import { EnumEffectRule } from 'System/constants/GameEnum'

/**
 * <在此键入面板的中文名称>面板。
 *
 * 本文件代码由模板生成，你可能需要继续修改其他代码文件才能正常使用。
 * Code generated by Bat&Perl.
 *
 * @author Administrator
 *
 */
export class DiamondUpPanel extends CommonForm {
    private _materialListData: DiamondUpMaterialItemData[];
    private upListData: DiamondUpItemData[];
    private upListDic: { [pos: number]: DiamondUpItemData };

    private _equipPos: number = 0;
    private _gemPos: number = 0;

    private _gemType: number = 0;
    private _gemId: number = 0;

    private materialVoArr: number[] = [];
    /**宝石升级选择的数量*/
    private _matercialCount: number = 0;
    private _gemLevel: number = 0;
    private _nextGemCfg: GameConfig.ThingConfigM;
    private _maxVal: number = 0;
    private _crtVal: number = 0;
    private _equipId: number = 0;

    private list: List;
    private fixedList: FixedList;
    //当前宝石图标
    private curSelectIcon: UnityEngine.GameObject;
    private curIconItem: IconItem;

    private itemIcon_Normal: UnityEngine.GameObject;
    private btnRule: UnityEngine.GameObject;
    private btnPut: UnityEngine.GameObject;
    private btnLvUp: UnityEngine.GameObject;
    private btnClose: UnityEngine.GameObject;
    //进度
    private txtCurProgress: UnityEngine.UI.Text;
    private bar: UnityEngine.GameObject;

    private diamondData: InsertDiamondItemData;
    private iconItems: IconItem[] = [];
    private fixedIconItems: IconItem[] = [];
    private txtFixedValues: UnityEngine.UI.Text[] = [];

    //特效
    private isCheckEffect: boolean = false;//是否检查特效播不播放
    private curDiamondLv: number = -1;//当前宝石等级，升一级才出特效
    private oldDiamondLv: number = -1;
    private shengjiEffect: UnityEngine.GameObject;
    private equipEffect: UnityEngine.GameObject;
    private shengjiRoot: UnityEngine.GameObject;
    private objTip: UnityEngine.GameObject;
    private shengJiUiEffect: UIEffect;
    private equipUiEffect: UIEffect;


    constructor() {
        super(0);
    }

    layer(): UILayer {
        return UILayer.Second;
    }
    protected resPath(): string {
        return UIPathData.DiamondUpPanel;
    }
    protected initElements(): void {
        this.itemIcon_Normal = this.elems.getElement("itemIcon_Normal");
        this.objTip = this.elems.getElement("objTip");

        this.list = this.elems.getUIList("list");
        this.fixedList = this.elems.getUIFixedList("fixedList");

        //中间宝石图标显示
        this.curSelectIcon = this.elems.getElement("curSelectIcon");
        this.curIconItem = new IconItem();
        this.curIconItem.setUsualIconByPrefab(this.itemIcon_Normal, this.curSelectIcon);
        this.curIconItem.setTipFrom(TipFrom.normal);
        //进度
        this.txtCurProgress = this.elems.getText("txtCurProgress");
        this.bar = this.elems.getElement("bar");

        this.btnRule = this.elems.getElement("btnRule");
        this.btnPut = this.elems.getElement("btnPut");
        this.btnClose = this.elems.getElement("btnClose");
        this.btnLvUp = this.elems.getElement("btnLvUp");

        //特效
        this.shengjiEffect = this.elems.getElement("shengjiEffect");
        this.equipEffect = this.elems.getElement("equipEffect");
        this.shengjiRoot = this.elems.getElement("shengjiRoot");
        this.shengJiUiEffect = new UIEffect();
        this.equipUiEffect = new UIEffect();
        this.shengJiUiEffect.setEffectPrefab(this.shengjiEffect, this.shengjiRoot);
        this.equipUiEffect.setEffectPrefab(this.equipEffect, this.curSelectIcon);

    }
    protected initListeners(): void {
        this.addListClickListener(this.list, this.onClickListItem);
        this.addListClickListener(this.fixedList, this.onClickFixedListItem);

        this.addClickListener(this.btnRule, this.onBtnRule);
        this.addClickListener(this.btnPut, this.onBtnPut);
        this.addClickListener(this.btnClose, this.onBtnClose);
        this.addClickListener(this.elems.getElement("mask"), this.onBtnClose);
        this.addClickListener(this.btnLvUp, this.onBtnLvUp);

    }

    open(data: InsertDiamondItemData) {
        this.diamondData = data;
        if (this.diamondData != null) {
            this._equipPos = data.pos;
            this._gemPos = data.slot;
            this.curDiamondLv = data.level;
            this.oldDiamondLv = data.level;
        }

        super.open();
    }


    protected onOpen() {
        this.updateView();
    }

    protected onClose() {

    }

    private onBtnRule() {
        let str = "1.吞噬同类型宝石可提升该宝石等级" + "\n" +
            "2.点击要被吞噬的宝石到融合槽内作为升级材料" + "\n" +
            "3.填充宝石后点击升级可获得对应经验，经验值满后宝石等级提升" + "\n" +
            "4.溢出的宝石经验保留到下一级"

        G.Uimgr.createForm<ActivityRuleView>(ActivityRuleView).open(str, '宝石升级');
    }


    private onBtnClose() {
        this.close();
    }

    onContainerChange(id: number): void {
        if (this.isOpened && (id == Macros.CONTAINER_TYPE_ROLE_EQUIP || id == Macros.CONTAINER_TYPE_ROLE_BAG)) {
            this.updateView();
        }
    }

    onDiamondUpSuccess(): void {
        this.isCheckEffect = true;
        G.AudioMgr.playStarBombSucessSound();
        this.materialVoArr.length = 0;
        this.updateView();

    }


    /**获取宝石类型*/
    private getGameType(id: number): number {
        return Math.floor(id / 1000);
    }

    /**获取宝石等级*/
    private getGameLevel(id: number): number {
        return (Math.floor(id / 10)) % 100;
    }

    private updateView(): void {
        this._maxVal = 0;
        this._crtVal = 0;
        let equipDic: { [pos: number]: ThingItemData } = G.DataMgr.thingData.getContainer(Macros.CONTAINER_TYPE_ROLE_EQUIP);
        let equipVo: ThingItemData = equipDic[this._equipPos];
        if (equipVo && equipVo.data && this._gemPos > 0) {
            this._equipId = equipVo.config.m_iID;
            this._gemId = equipVo.data.m_stThingProperty.m_stSpecThingProperty.m_stEquipInfo.m_stDiamond.m_aiDiamondID[this._gemPos - 1];
            this._gemType = this.getGameType(this._gemId);
            this._gemLevel = this.getGameLevel(this._gemId);
            //合成图标显示
            this.curIconItem.updateById(this._gemId);
            this.curIconItem.updateIcon();

            //升了1级，特效
            this.curDiamondLv = EquipUtils.getDiamondLevel(this._gemId);
            if (this.isCheckEffect && this.oldDiamondLv > 0 && this.oldDiamondLv != this.curDiamondLv) {
                this.oldDiamondLv = this.curDiamondLv;
                this.shengJiUiEffect.playEffect(EffectType.Effect_Normal);
                this.equipUiEffect.playEffect(EffectType.Effect_Normal);
                G.AudioMgr.playJinJieSucessSound();
                this.isCheckEffect = false;
            }


            let gemPropCfg: GameConfig.DiamondPropM = G.DataMgr.equipStrengthenData.getDiamondConfig(this._gemId);
            this._nextGemCfg = ThingData.getThingConfig(this._gemId + 10);
            this._crtVal = equipVo.data.m_stThingProperty.m_stSpecThingProperty.m_stEquipInfo.m_stDiamond.m_aiDiamondIDProcess[this._gemPos - 1];
            this._maxVal = EnumEquipRule.getDiamondMaxExp(this._gemId);
            if (this._nextGemCfg) {
                this.txtCurProgress.text = uts.format('{0}/{1}', this._crtVal, this._maxVal);
                let value = this._crtVal / this._maxVal;
                this.bar.transform.localScale = G.getCacheV3(value > 1 ? 1 : value, 1, 1);
            }
            else {
                this.txtCurProgress.text = '已满级';
                this.bar.transform.localScale = G.getCacheV3(1, 1, 1);
            }
        }
        this.updateUpList();

        this.updateMaterialData();
    }

    private updateUpList(): void {
        let itemVo: DiamondUpItemData;

        let bagGemType: number = 0;
        let bagGemLevel: number = 0;
        this.upListDic = {};
        this.upListData = [];

        let diamondList: ThingItemData[] = G.DataMgr.thingData.getThingListByFunction(KeyWord.ITEM_FUNCTION_EQUIP_JEWEL);

        for (let thingVo of diamondList) {
            if (thingVo.config) {
                bagGemType = this.getGameType(thingVo.config.m_iID);
                bagGemLevel = this.getGameLevel(thingVo.config.m_iID);
            }

            if (this._gemType == bagGemType && this._gemLevel >= bagGemLevel) {
                itemVo = new DiamondUpItemData();
                itemVo.thingVo = uts.deepcopy(thingVo, itemVo.thingVo, true);
                itemVo.num = thingVo.data.m_iNumber;
                this.upListDic[thingVo.data.m_usPosition] = itemVo;
                this.upListData.push(itemVo);
            }
        }

        for (let materialPos of this.materialVoArr) {
            if (materialPos >= 0) {
                itemVo = this.getUpItemData(materialPos);
                if (itemVo) {
                    itemVo.num--;
                }
            }
        }

        this.objTip.SetActive(this.upListData.length == 0);

        this.list.Count = this.upListData.length;
        for (let i = 0; i < this.list.Count; i++) {
            let iconRoot = this.list.GetItem(i).findObject("icon");
            if (this.iconItems[i] == null) {
                let iconItem = new IconItem();
                iconItem.setUsualIconByPrefab(this.itemIcon_Normal, iconRoot);
                iconItem.needEffectGrey = true;
                this.iconItems.push(iconItem);
            }
            this.iconItems[i].updateById(this.upListData[i].thingVo.config.m_iID, this.upListData[i].num);
            this.iconItems[i].filterType = this.upListData[i].num > 0 ? IconItem.NoNeedFILTER_GRAY : IconItem.FILTER_GRAY;
            this.iconItems[i].effectRule = this.upListData[i].num > 0 ? EnumEffectRule.normal : EnumEffectRule.none;
            this.iconItems[i].updateIcon();
        }

    }

    /**获取宝石列表数据*/
    private getUpItemData(materialPos: number): DiamondUpItemData {
        return this.upListDic[materialPos];
    }

    /**排序*/
    private _sortUpList(a: DiamondUpItemData, b: DiamondUpItemData): number {
        if (!a.thingVo && b.thingVo) {
            return 1;
        }
        if (a.thingVo && !b.thingVo) {
            return -1;
        }
        if (a.thingVo && b.thingVo) {
            return a.thingVo.config.m_iID - b.thingVo.config.m_iID;
        }
        return 0;
    }

    private updateMaterialData(): void {
        this._matercialCount = 0;
        let addVal: number = 0;
        for (let i: number = 0; i < EnumEquipRule.DIAMOND_UP_MATERIAL_MAX_COUNT; i++) {
            let itemVo: DiamondUpMaterialItemData = this.materialListData[i];
            if (i < this.materialVoArr.length) {
                let materialPos: number = this.materialVoArr[i];
                let upItemData: DiamondUpItemData = this.getUpItemData(materialPos);
                let thingVo: ThingItemData = upItemData ? upItemData.thingVo : null;
                itemVo.thingVo = thingVo;
                if (thingVo) {
                    addVal += EnumEquipRule.getDiamondUpAllExp(thingVo);
                    this._matercialCount++;
                }
            }
            else {
                itemVo.thingVo = null;
            }


            let item = this.fixedList.GetItem(i);
            let iconRoot = this.fixedList.GetItem(i).findObject("icon");
            let txtValue = this.fixedList.GetItem(i).findText("txtValue");
            if (this.fixedIconItems[i] == null) {
                let iconItem = new IconItem();
                iconItem.setUsualIconByPrefab(this.itemIcon_Normal, iconRoot);
                this.fixedIconItems.push(iconItem);
                this.txtFixedValues.push(txtValue);
            }
            if (itemVo.thingVo == null) {
                this.fixedIconItems[i].updateByThingItemData(itemVo.thingVo);
                this.txtFixedValues[i].text = "";
            } else {
                this.fixedIconItems[i].updateById(itemVo.thingVo.config.m_iID, 1);
                let gemCfg: GameConfig.DiamondPropM = G.DataMgr.equipStrengthenData.getDiamondConfig(itemVo.thingVo.config.m_iID);
                this.txtFixedValues[i].text = "+ " + (gemCfg.m_uiProp1process + itemVo.thingVo.data.m_stThingProperty.m_stSpecThingProperty.m_stDiamondProcessInfo.m_uiProcess);
            }

            this.fixedIconItems[i].updateIcon();

        }

        this.btnLvUp.SetActive(this._matercialCount != 0);
        this.btnPut.SetActive(this._matercialCount == 0);

        if (this._maxVal <= 0) {
            this.bar.transform.localScale = G.getCacheV3(1, 1, 1);
            this.txtCurProgress.text = "已满级";
        } else {
            let value = (this._crtVal + addVal) / this._maxVal;
            this.bar.transform.localScale = G.getCacheV3(value > 1 ? 1 : value, 1, 1);
            this.txtCurProgress.text = uts.format('{0}/{1}', this._crtVal + addVal, this._maxVal);
        }
    }

    /**选中宝石*/
    private onClickListItem(index: number): void {
        //  let i: number = 0
        if (this._matercialCount >= EnumEquipRule.DIAMOND_UP_MATERIAL_MAX_COUNT) {
            G.TipMgr.addMainFloatTip("镶嵌槽内宝石已满，不能在添加了");
            return;
        }
        let itemVo: DiamondUpItemData = this.upListData[index];
        if (itemVo && itemVo.thingVo) {
            if (itemVo.num) {
                let isPush: boolean = false;
                for (let i = 0; i < this.materialVoArr.length; i++) {
                    if (this.materialVoArr[i] < 0) {
                        this.materialVoArr[i] = itemVo.thingVo.data.m_usPosition;
                        isPush = true;
                        break;
                    }
                }
                if (!isPush) {
                    this.materialVoArr.push(itemVo.thingVo.data.m_usPosition);
                }
            }
            else {
                G.TipMgr.addMainFloatTip("该类型宝石已全部使用完");
            }
        }
        this.updateView();
    }

    /**返回*/
    private onBtnBack(): void {
        close();
    }

    /**合成*/
    private onBtnLvUp(): void {
        if (this._nextGemCfg == null) {
            G.TipMgr.addMainFloatTip('已升级到顶阶');
            return;
        }
        else if (this._nextGemCfg.m_ucRequiredLevel > EquipStrengthenData.getEquipLevel(this._equipId)) {
            G.TipMgr.addMainFloatTip('装备强化等级不足');
            return;
        }
        let i: number = 0;
        let count: number = 0;
        let things: Protocol.ContainerThing[] = [];
        for (i = 0; i < this.materialVoArr.length; i++) {
            let materialPos: number = this.materialVoArr[i];
            if (materialPos >= 0) {
                let upItemData: DiamondUpItemData = this.getUpItemData(materialPos);
                let thingVo: ThingItemData = upItemData ? upItemData.thingVo : null;
                ;
                let thing: Protocol.ContainerThing = {} as Protocol.ContainerThing;
                if (thingVo) {
                    thing.m_iThingID = thingVo.config.m_iID;
                    thing.m_usPosition = thingVo.data.m_usPosition;
                    thing.m_iNumber = 1;
                }
                things.push(thing);
                count++;
            }
        }
        if (count) {
            G.ModuleMgr.netModule.sendMsg(ProtocolUtil.getDiamondUplevelRequest(Macros.CONTAINER_TYPE_ROLE_EQUIP, this._equipPos, things, count, this._gemPos));
        }
    }

    /**一键填充*/
    private onBtnPut(): void {
        let i: number = 0
        let needCount: number = EnumEquipRule.DIAMOND_UP_MATERIAL_MAX_COUNT - this._matercialCount;
        if (needCount <= 0) {
            G.TipMgr.addMainFloatTip("镶嵌槽内宝石已满，不能在添加了");
            return;
        }

        let len: number = this.upListData.length;
        for (let j: number = 0; j < len; j++) {
            let itemVo: DiamondUpItemData = this.upListData[j];
            if (needCount == 0) {
                break;
            }
            if (itemVo && itemVo.thingVo) {
                if (itemVo.num) {
                    let isPush: boolean = false;
                    let pushCount: number = Math.min(itemVo.num, needCount);
                    for (let k: number = 0; k < pushCount; k++) {
                        isPush = false;
                        if (needCount == 0) {
                            break;
                        }
                        for (i = 0; i < this.materialVoArr.length; i++) {
                            if (this.materialVoArr[i] < 0) {
                                this.materialVoArr[i] = itemVo.thingVo.data.m_usPosition;
                                isPush = true;
                                needCount--;
                                break;
                            }
                        }
                        if (!isPush) {
                            this.materialVoArr.push(itemVo.thingVo.data.m_usPosition);
                            needCount--;
                        }
                    }
                }
            }
        }

        this.updateView();
    }

    /**取消宝石*/
    private onClickFixedListItem(index: number): void {
        if (this.materialVoArr[index] >= 0) {
            this.materialVoArr[index] = -1;
            this.updateView();
        }
    }


    get materialListData(): DiamondUpMaterialItemData[] {
        if (!this._materialListData) {
            this._materialListData = new Array<DiamondUpMaterialItemData>();
            for (let i: number = 0; i < EnumEquipRule.DIAMOND_UP_MATERIAL_MAX_COUNT; i++) {
                let itemVo: DiamondUpMaterialItemData = new DiamondUpMaterialItemData();
                this._materialListData.push(itemVo);
            }
        }
        return this._materialListData;
    }

}
